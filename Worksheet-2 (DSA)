// Aim-Given a sorted array of size n & an integer k, find the position(0-based indexing) at which k is present in the array using binary search.
// Input n=8, arr[]={1,2,3,4,5,6,7,8}, k=7
// Output: 6

#include<iostream>
using namespace std;

int binary_search(int arr[],int n,int k)
{
    int low=0;
    int high=n-1;
    while(low<high)
    {
        int mid=(low+high)/2;
        if(arr[mid]==k)
        {
            return mid;
        }
        else if(arr[mid]<k)
        {
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
}

int main()
{
    int n,k;
    int arr[10];
    cout<<"Enter the size=";
    cin>>n;
    cout<<"Enter the elements=";
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<"Enter the element which we have to find in an array=";
    cin>>k;
    int index=binary_search(arr,n,k);
    cout<<"Element"<<" "<<k<<" "<<"found at index="<<index;
    return 0;
}
